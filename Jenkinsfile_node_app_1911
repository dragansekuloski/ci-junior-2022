pipeline {
    agent any

    triggers { 
        pollSCM('*/1 * * * *') 
    }

    stages {
        stage('build') {
            steps {
                echo "Building node app..."
            }
        }

        stage('deploy-dev') {
            steps {
                script {
                    deploy("DEV")
                }
            }
        }

        stage('test-dev') {
            steps {
                 script {
                    test("DEV")
                }
            }
        }

        stage('deploy-int') {
            steps {
                script {
                    deploy("INT")
                }
            }
        }

        stage('test-int') {
            steps {
                script {
                    test("INT")
                }
            }
        }

        stage('deploy-prod') {
            steps {
                script {
                    deploy("PROD")
                }
            }
        }

        stage('test-prod') {
            steps {
                script {
                    test("PROD")
                }
            }
        }
    }
}

def deploy(String environment){
    echo "Deploying on ${environment} environment..."
    // On this stage we would like to trigger one job
    //  trigger UI tests in pipeline defined before "dragan-ui-test"
    // that pipeline has parameters so we need to set it up as well 
    build job: "dragan-ui-test", 
        parameters: [string(name: 'ENVIRONMENT', value: "${environment}")] 
}

def test(String environment){
    echo "Testing on ${environment} environment..."
    //trigger executor container
    sh "docker run --network=host -d -t --name api_test_executor_${environment} api_test_executor"
    // execute specific comand for the running container
    sh "docker exec api_test_executor_${environment} cucumber --tags=@${environment} --format html --out test-output/report.html"
    // how to get report "docker cp" copy the files
    // from docker host to the source machine
    sh "docker cp api_test_executor_${environment}:/usr/src/api-tests/test-output/report.html report_${environment}.html"
    // kill the container
    sh "docker rm -f api_test_executor_${environment}"

}
